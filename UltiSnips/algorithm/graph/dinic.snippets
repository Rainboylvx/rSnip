snippet dinic "dinic最大流算法" b
/* ============ dinic 最大流 BEG ============ */
struct Dinic {
    int s,t,dep[maxn],cur[maxn]; //起点，终点
    inline void set(int a,int b){s =a , t = b;}
    queue<int> q;
    bool bfs(){
        while( !q.empty()) q.pop();
        dep[s] = 1;
        q.push(s);
        for(int i=s;i<=t;++i) cur[i] = e.h[i],dep[i]=0;
        
        while ( !q.empty() ) {
            int u = q.front(); q.pop();
            for(int i=e.h[u];~i;i=e[i].next){
                int &v = e[i].v, &w = e[i].w;
                if( dep[v] == 0 && w != 0 ){
                    dep[v] = dep[u]+1;
                    q.push(v);
                }
            }
        }
        return dep[t]!=0;
    }
    //多路增广,当前弧优化
    int dfs(int u,int c){
        if( u == t ) return c;
        int used = 0;
        for(int &i=cur[u];~i;i=e[i].next){
            int &v = e[i].v, &w = e[i].w;
            if( dep[v] == dep[u]+1 && w !=0 ) {
                int tmp = dfs(v,min(c-used,w));
                if( tmp == 0 ) continue;
                used += tmp;
                e[i].w   -= tmp;
                e[i^1].w += tmp;
                if( used == c) return c;
            }
        }
        //从这个出发没有找到任何增广路
        //那不要从这个点就出发了
        if( used == 0) dep[u] = 0;
        return used;
    }
    int work(){
        int ans = 0;
        while ( bfs() ) 
            ans += dfs(s,0x7f7f7f7f);
        return ans;
    }
} dinic;
/* ============ dinic 最大流 END ============ */
endsnippet
