#===================================================
# File:		   template.snippets
# Description: template cpp code
# Maintainer:  Rainboy<rainboylvx@qq.com>
# Licence:     Vim licence
# Website:     http://github.com/rainboylvx/rSnip
# ============================================================================

# simple code template
snippet tt "代码模板-简单" b
/* author: `!v g:global_author` email: `!v g:global_email`  time: `date` */
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e6+5,maxe = 1e6+5; //点与边的数量

int n,m;
${1:/* 定义全局变量 */}

int main(int argc,char * argv[]){
	$0
	return 0;
}
endsnippet

# code template
snippet ttt "代码模板-复杂" b
/*-------------------------------------------------------------------
* author:  `!v g:global_author`
* email:   `!v g:global_email`
* time:    `date`
* problem: ${1:online_judge}-${2:_id }
*------------------------------------------------------------------*/
#include <bits/stdc++.h>
typedef long long ll;
typedef __int128  bigi; //big int
using namespace std;

#ifndef DEBUG  /*----------------------------------*/
#define log(...)
#endif		   /*----------------------------------*/


template<class T> //快读
void read(T &a){
    a = 0;T flag = 1; char ch = getchar();
    while( ch < '0' || ch > '9'){ if( ch == '-') flag = -1; ch = getchar(); }
    while( ch >= '0' && ch <= '9'){ a = a*10 + ch-'0'; ch = getchar(); }
    a*=flag;
}
struct Freopen {
    Freopen(const string s){ freopen((s+".in").c_str(), "r", stdin); freopen((s+".out").c_str(), "w", stdout); }
    ~Freopen(){ fclose(stdin); fclose(stdout); }
};


/* ======= 全局变量 =======*/
const int maxn = 1e6+5,maxe = 1e6+5; //点与边的数量
int n,m;
${3:/* 定义全局变量 */}

/* ======= 全局变量 END =======*/

inline void init(){
	${4: /* 数据读入 */}
}

int main(int argc,char * argv[]){
	clock_t program_start_clock = clock(); //开始记时
	//Freopen ___freopen___ = "name";
	//===================
	init();

	//=================== 
	fprintf(stderr,"\n Total Time: %lf ms",double(clock()-program_start_clock)/(CLOCKS_PER_SEC / 1000));
	return 0;
}

/* 作者：[这里写你的名字] ; 邮箱：[这里写你的邮箱] ; 时间:$TODAY */
#include <bits/stdc++.h>
using namespace std;
#define fo(i,a,b) for(int i=a;i<=b;i++)
#define of(i,a,b) for(int i=a;i>=b;i--)
#define mm memset
#define EPS 1e-8
#define inf 0x7f7f7f7f
#define ninf -inf
typedef long long ll;

//#define dbg(...) [](const auto&...x){ char c='='; cerr<<#__VA_ARGS__<<" "; ((cerr<<exchange(c,',')<<" "<<x),...); cerr<<endl; }(__VA_ARGS__);
//兼容问题，没有使用c++17的 fold expression,使用了c++11递归 variadic template
template<char Delimiter = ' ',typename Args>
void print(std::ostream &os, Args&& args){ os << args << std::endl; }

template<char Delimiter = ' ',typename T,typename... Args>
void print(std::ostream &os,T t,Args&&... args){
    os << t << Delimiter;
    print<Delimiter>(os,args...);
}
#define  dbg(...) std::cerr << "Line: " << __LINE__ << ": " #__VA_ARGS__ " = "; print<','>(std::cerr,__VA_ARGS__)

/* 快读: 可以用于 int,long long , __int128 */
template<class T>
void read(T &a){
    a = 0;T flag = 1; char ch = getchar();
    while( ch <  '0' || ch >  '9'){ if( ch == '-') flag = -1; ch = getchar(); }
    while( ch >= '0' && ch <= '9'){ a = a*10 + ch-'0'; ch = getchar(); }
    a*=flag;
}
// ---------------------- 代码开始 ----------------------

const int maxn = 1e6+5,maxe = 1e6+5; //点与边的数量
/* 定义全局变量 */
int n,m; 


int main(){
    ios::sync_with_stdio(false); cin.tie(0); // cin 加速


    return 0;
}
endsnippet

snippet data_gen "数据生成" b
/* author: `!v g:global_author` email: `!v g:global_email`  time: `date` */
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e6+5,maxe = 1e6+5; //点与边的数量

int n,m;
/* 定义全局变量 */

// 生成[l,r]内的整数随机数
inline int rnd(int l,int r){ return rand() %(r-l+1) +l; }
// 生成随机大小写字母
inline char rnd_char(bool lower=1){ return rnd('a','z') + (lower ? 0 : 'A'-'a');}

//不重复的l,r的序列
std::vector<int> rnd_norep_squence(int l,int r){
    std::vector<int> v{};
    for(int i=l;i<=r;++i) v.push_back(i);
    std::random_shuffle(v.begin(), v.end());
    return v;
}

//随机树
struct rnd_tree {
    struct edge {int u,v,w;};
    std::vector<edge> e;
    vector<int> node{};
    bool output_weight = 1; //是否输出边权
    rnd_tree(size_t n,int Min_ew=1,int Max_ew=100000){
        for(int i=1;i<=n;++i) node.push_back(i);
        for(int i=2;i<=n;++i){
            int u      = rnd(1,i-1);
            int weight = rnd(Min_ew,Max_ew);
            e.push_back({u,i,weight});
        }
        std::random_shuffle(node.begin(), node.end());
        //cout << "=";
    }
    friend std::ostream& operator<<(std::ostream & os,const rnd_tree & rt) {
        for (const auto& e : rt.e) {
            os << rt.node[e.u-1] << " " << rt.node[e.v-1];
            if( rt.output_weight )    os << " " << e.w;
            os<< std::endl;
        }
        return os;
    }
};
//TODO
//随机图
//随机序列


int main(int argc,char * argv[]){
    srand(std::random_device ()()); //加到main的第一句

    n = atoi(argv[1]); //得到参数
	$0
	return 0;
}

endsnippet
